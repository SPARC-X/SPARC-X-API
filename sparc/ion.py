#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Thu Oct 18 14:16:21 2018

@author: benjamin
"""

from ase import Atoms, Atom
from .utilities import valence_dict
from ase.units import Bohr


def read_ion(fileobj):  # ,index):
    text = fileobj.read()
    comments_removed = []
    for line in text.split('\n'):
        comments_removed.append(line.split('#')[0])
    atoms = Atoms()
    for i, line in enumerate(comments_removed):
        if 'ATOM_TYPE:' in line:
            element = line.strip().split()[1]
            num = int(comments_removed[i + 1].strip().split()[1])
            for coord_set in comments_removed[i + 3:i + num + 3]:
                x, y, z = [float(a) * Bohr for a in coord_set.split()]
                atoms += Atom(symbol=element, position=(x, y, z))
    return atoms


def write_ion(fileobj, atoms, comment=''):
    elements = sorted(list(set(atoms.get_chemical_symbols())))
    
    fileobj.write('# Input File Generated By SPARC ASE Calculator #\n')
    fileobj.write('# ' + comment + '\n\n\n')
    for element in elements:
        fileobj.write('ATOM_TYPE: ')
        fileobj.write(element + ' ')
        if element =='Cu': # fix this hack when the .ion file is fixed
            fileobj.write('19' + '\n')
        elif element == 'Ti': # fix this hack when the .ion file is fixed
            fileobj.write('10' + '\n')
        else:
            fileobj.write(str(valence_dict[element]) + '\n')
        
        fileobj.write('N_TYPE_ATOM: ')
        fileobj.write(str(atoms.get_chemical_symbols().count(element)) + '\n')
        
        fileobj.write('COORD:\n')
        for atom in atoms:
            if atom.symbol == element:
                for position in atom.position:
                    fileobj.write('    ' + str(position / Bohr))
                fileobj.write('\n')
        fileobj.write('\n\n')
